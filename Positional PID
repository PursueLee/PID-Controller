#include <iostream>

void PID_init();
float PID_realize(float);

struct PID
{
    float SetValue;
    float ActualValue;
    float err;
    float err_last;
    float kp,ki,kd;
    float voltage;
    float integral;
    //float umax,umin; 可执行器的最大与最小值
}pid;

int main()
{
    cout<<"System begin"<<endl;
    int count=0;
    while(cout<1000)
    {
        float speed=PID_realize(200.0)
        cout<<"第"<<count<<"次速度为："<<speed<<endl;
        count++;
    }
    return 0;
}

void PID_init()
{
    cout<<"Initial begin："<<endl;
    pid.SetValue=0.0;
    pid.ActualValue=0.0;
    pid.err=0.0;
    pid.err_last=0.0;
    pid.voltage=0.0;
    pid.integral=0.0;
    pid.kp=0.2;
    pid.ki=0.015;
    pid.kd=0.2;
    //pid.umax=400;
    //pid.umin=-200;
    cout<<"Initial end.";
}

float PID_realize(float speed)
{
    pid.SetValue=speed;
    pid.err=pid.SetValue-pid.ActualValue;
    /* 在实现公式的积分项前加一index，当最开始误差较大时取消积分作用
    if(abs(pid.err>180))
        index=0;
    else
    {
        index=1;
        pid.inregral+=pid.err;
    }
    */
    pid.integral+=pid.err;
    pid.voltage=pid.kp*pid.err+pid.ki*pid.integral+pid.kd*(pid.err-pid.err_last);
    pid.err_last=pid.err;
    pid.ActualValue=pid.voltage*1.0;
    return pid.ActualValue;
}

/****************抗积分饱和的实现
float PID_realize(float speed)
{
    pid.SetValue=speed;
    pid.err=pid.SetValue-pid.ActualValue;
    if(pid.ActualValue>pid.umax)
    {
        if(abs(pid.err)>200)  //防止err为负值但是过小，采用了积分分离；
            index=0;
        else if(pid.error<0)
        {
            index=1;
            pid.integral+=pid.err;
        }
    }
    else if(pid.ActualValue<pid.umin)
    {
        if(abs(pid.err>200))
            index=0;
        else if(pid.err>0)
        {
            index=1;
            pid.integral+=pid.err;
        }
    }
    else
    {
        if(abs(pid.err>200))
            index=0;
        else
        {
            index=1;
            pid.integral+=pid.err;
        }
    }
    pid.integral+=pid.err;
    pid.voltage=pid.kp*pid.err+pid.ki*pid.integral+pid.kd*(pid.err-pid.err_last);
    pid.err_last=pid.err;
    pid.ActualValue=pid.voltage*1.0;
    return pid.ActualValue;
}
***************************/
